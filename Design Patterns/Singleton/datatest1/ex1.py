"""сама реализация singleton,происходит через метод new/
сначала магический метод __new__,второй магический метод __init__, в new-обязательный параметр cls, в init- параметр self. cls- он ссылаеться на екземпляр класса, на тот клас в котором он находиться class Data: 
а self бузет ссылаться на создаваемый  екземпляр класса(db=Data(1, 2)) """
class Data:
    def __new__(cls, *args,**kwargs):
        print("calling new " + str(cls))
        return super().__new__(cls)# эта строка означает,что екземпляр класса был создан,если ето не вписать,то будет выводиться None.None- говорит о том что екземпляр класса не был создан,
        #то есть db должен ссылаться на екземпляр а он ссылаеться на none
    #new должен возвращать адрес нового созданного обьекта и если  не вписать super().__new__(cls) то ничего не будет
    """в иерархии классов начиная с python3,все классы автоматически наследуються о тбазового класса
    [object
        def__new__(cls):] когда вызыва5еться функция syper, в нашем классе,то мы получаем ссылку на базовый класс, и в этом базовом классе,через свою ссылку вызываеться магический метод new,  и этот магический метод уже запускает процес создания екземпляра класса и возвращает адрес нового созданного обьекта. 
        а  с помощью return возвращаем этот адрес дальше"""
    
    def __init__(self):
        print("calling init for ", str(self))

db=Data()
print(db)
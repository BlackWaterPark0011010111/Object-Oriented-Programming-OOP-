"""в конструкторе где будут создаваться обьекты, 
магический метод __init__, не подходит,потому 
что он уже инициализирует разные атрибуты,то 
есть мы присваиваем разные age,colour и другие. 
но обьект уже существует,а нужно обеспечить то что
 обьект всегда один и больше не создаеться,за все 
 время системы, за все время работы сервиса,всего 
 один раз. метод init- это позновато,нужен метод 
 который идет раньше ,метод __new__   (конструктор).
   __init__
- тоже конструктор,но он работает с уже
 готовым обьектом,то есть если я создаю обьект 
 ,сначала вызываеться метод "new",который 
 собственно создает обьект и выделяет память 
 для него,а "init". уже инициаллизирует атрибуты,и 
 new он работает с cls(с классом), а не с обьектом,потому что еще обьекта нет,его нужно создать."""

class Singleton:
    _instance = None #мы создаем ссылку, статическая переменная хранящая в себе экземпляр 

    def __new__(cls):
        if Singleton._instance is None:#если нету экземпляра,если мы обьектов еще не создавали 
            #то нужно его создать
            Singleton._instance=super().__new__(cls)#создание, мы через object? через super обращаемся и говорим что нужно создать для класса(cls) и присваиваем ссылку на instance 
        return Singleton._instance #возвращаем существующий или новый
    
a = Singleton()
print(a)
b =Singleton()
print(b)
c = Singleton()
print(c)
print(a is b)